CREATE TABLE table_name ( => table 생성 
column1 datatype,  => 테이블 내에 저장형식 지정
column2 datatype, 
column3 datatype); 

Additional DB language: 
-table/relation: 표, 데이터의 집합
-row/record/tuple: 테이블의 행에 해당 
-column/field/attribute: 테이블의 열에 해당
-cell: 테이블에서 행과 열의 교차점에 있는 특정 값이 저장된 위치 
-Primary Kery(기본키): 레코드를 고유하게 구별할 수 있는 값
-Candidate Key(후보키): 레코드를 고유하게 구별할 수 있는 키들 모두 
-Foreign Key(외래키): 테이블들 간에 참조 무결성을 위해서 사용 값

DESC t_table; 이용하면 테이블 구성요소 한번에 확인가능 

ALTER: 객체 수정- 구조를 변경하고자 할 떄
-지정한 테이블에 컬럼을 추가하려고 할 때 
ALTER TABLE  table_name ADD column_name datatype; 
EX) ALTER TABLE t_table ADD phone VARCHAR(20);

-데이터타입 수정하기 
ALTER TABLE t_table MODIFY COLUMN korean VARCHAR(5);

-테이블 컬럼 삭제하기 
ALTER TABLE t_table DROP COLUMN korean;

-컬럼 추가하고 타입 변경하기  
ALTER TABLE t_table ADD KOREAN VARCHAR(20), ADD Math VARCHAR(10);
ALTER TABLE t_table MODIFY COLUMN MATH INT, MODIFY COLUMN ENGLISH INT; 

-테이블 내용 삽입 후 안의 내용 전부 삭제하기  
INSERT INTO t_table(stu_num,NAME) VALUES (1,'test');
TRUNCATE TABLE t_table;

-테이블, 데이터베이스 다 지우기 
DROP table t_table; 
DROP database testdb; 

-접속한 Database확인하기  
SELECT DATABASE (); 

-제약조건 설정하기 
CREATE TABLE PERSONS (  
ID INT NOT NULL, 
LASTName VARCHAR(255) NOT NULL, 
FIRSTName VARCHAR(255) NOT NULL, 
AGE INT 
);

-데이터베이스와 테이블을 한꺼번에 만들기 
CREATE table testDB.tables ( ); 

-persons테이블 만들기(Primary key, Not null 등 제약조건 확인)  
CREATE TABLE persons ( 
ID INT NOT NULL, 
LASTName VARCHAR (255) NOT NULL, 
FIRSTName VARCHAR (255), 
age INT,
CHECK (Age>=18) 
 );

-Table 명이 'persons'인 테이블의 제약조건을 모두 출력해라 
SELECT * FROM information_schema.table_constraints WHERE TABLE_NAME='persons';

-세로운 테이블 생성  
CREATE TABLE Orders (   
ID INT NOT NULL, 
OrderNumber INT NOT NULL, 
OrderDate TIMESTAMP DEFAULT NOW ()
);

-ID, OrderNumber 에 1,1,을 넣어도 Timestamp가 Default이기 때문에 자동으로 들어간다.  
INSERT INTO orders (ID, OrderNumber) VALUES (1,1); 


-persons테이블 생성 
CREATE TABLE persons (  
ID INT NOT NULL AUTO_INCREMENT, 
LastName VARCHAR(255) NOT NULL, 
FirstName VARCHAR(255), 
Age INT, 
PRIMARY KEY(ID)
); s

-persons테이블에 값 입력 
INSERT INTO persons (LastName, FirstName, Age) 
VALUES ('t1','Young', 21);

-테이블 자동증가 시작값 변경하기 
ALTER TABLE persons AUTO_INCREMENT=100;

#Update 실습예제 

UPDATE table_name SET column = value1 where condition; 

Ex) ID가 3인 사람의 person ID를 10으로 변경하여라
UPDATE orders SET personID=10 WHERE ID=3; 


UPDATE orders SET Person ID =4 WHERE id= 1,3,5;
*Where절의 복수형은? => Or 을 사용 
UPDATE orders SET PersonID=4 WHERE ID =1 OR ID=3 OR ID =5; 
 
SELECT: 테이블 내에 데이터를 검색 


-나이가 30대인 사람이 사는 도시는?  
SELECT CITY    
FROM persons   
WHERE age between 30 and 39; 


where A and B 
where A or B 
where not a='value' 


부산과 수원에 사는 사람 중 나이가 30 이상 사람들 
SELECT FIRSTNAME, LASTNAME 
FROM persons 
WHERE CITY= 'Busan' OR CITY= 'Suwon'; 

나이가 20이상 사람중 도시가 광주인 사람과 대구인 사람의 나이 
SELECT CITY, AGE  
FROM persons 
WHERE age>=20 AND 
(CITY='Gwangju' OR 
CITY='Daegu') 

도시가 서울이 아닌 사람들 중에서 부산 사람을 뺸 나머지  
SELECT *                                       
FROM persons                                   
WHERE NOT CITY= 'SEOUL' AND NOT CITY='Busan';  

Order by: 결과에 대한 정렬 

Stringhouse 
SELECT a,b,c 
FROM table_name 
ORDER BY a,b,c ASC | DESC 

Transaction: 
Alter talbe table_name engine=INnoB

rollback;
   
DELETE: 테이블 내에 데이터를 삭제 

<집단함수> 
MAX() 
MIN()
COUNT()
AVG() 예제: Persons 테이블 안에 있는 사람들의 나이의 평균  
SUM(): select sum(Age) from Persons why City= 'Seoul'; 

LIKE조건문: 

WHERE COLUMN LIKE 'a%' 
WHERE COLUMN LIKE '%a' 
WHERE COLUMN LIKE '%or%'
WHERE COLUMN LIKE '_r%'
WHERE COLUMN LIKE 'a_%_%'
WHERE COLUMN LIKE 'a%o'

SELECT * 
FROM PERSONS 
WHERE CITY IN  ('SEOUL',


















