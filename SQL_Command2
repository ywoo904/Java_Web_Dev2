## SQL 명령어

1. 데이터베이스 정의어(CREATE, ALTER, DROP)

  -CREATE : 객체 생성

    -DB생성-
    CREATE DATABASE databasename; => 데이터베이스 생성
 
   
    -DB내에 Table생성-
    CREATE TABLE table_name (   => 테이블 생성
        column1 datatype,	    => 테이블 내에 column의 저장 형식 지정
        column2 datatype,
        column3 datatype,
        column4 datatype,
        ....
    );

   **추가-DB에서 사용되는 용어
     -table/relation : 표, 데이터의 집합
     -row/record/tuple : 테이블의 행에 해당
     -column/field/attribute : 테이블의 열에 해당
     -cell : 테이블에서 행과 열의 교차점에 있는 특정 값이 저장된 위치
     -Primary key(기본키) : 레코드를 고유하게 구별할 수 있는 값
     -Candidate key(후보키) : 레코드를 고유하게 구별할 수 있는 키들 모두
     -Foreign key(외래키) : 테이블들 간에 참조 무결성을 위해서 사용 값
   

  -ALTER : 객체 수정 - 구조를 변경하고자 할 때

   *지정한 테이블에 컬럼을 추가하려고 할 때, 
    ALTER TABLE table_name ADD column_name datatype;

  예제) t_table에 phone(varchar(20))를 추가하기

  => MariaDB [testdb]> alter table t_table add phone varchar(20);

  실습) t_table에 korean(int), english(int), math(int) 컬럼을 추가하세요

  *테이터 타입 수정
     -SQL Server/MS Access
       ALTER TABLE table_name ALTER COLUMN column_name datatype;
     -MySQL / Oracle(10G 이전)
       ALTER TABLE table_name MODIFY COLUMN column_name datatype;
     -Oracle 10G 이후 버전
       ALGER TABLE table_name MODIFY column_name datatype;

   *지정된 테이블에 컬럼을 삭제할 때, (일부 시스템에서는 지원하지 않을 수 있음)

    예) t_table에 있는 English를 삭제
    MariaDB [testDB]> alter table t_table drop column English;  

실습) Korean(varchar(5)), Math(varchar(10)) 추가하고, varchar -> int로 변경하세요.


=============================
  -DROP : 객체 삭제 

   *database 삭제
    DROP DATABASE database_name;   => 데이터베이스 삭제

    MariaDB [testDB]> drop database testDB

   *table 삭제
    DROP TABLE table_name;         => 테이블 삭제


  **TRUNCATE TABLE => 테이블 내에 있는 데이터를 삭제. 
                    테이블에 형태는 삭제하지 않음.
    TRUNCATE TABLE table_name;

연습문제))
   1)데이터 베이스 testDB를 생성하라. 
   2)데이터 베이스 testDB에 testTable을 생성하라
     생성할 테이블의 형태는 
     num(int), name(varchar), phone(varchar), address(varchar), email(varchar)
   3)생성한 테이블에 student_num(int),korean(int),math(int),english(int)를 추가
   4)추가한 student_num의 테이터 타입을 varchar형태로 변경해라. 
   5)address 컬럼을 삭제해라. 
   6)testTable 테이블을 삭제해라. 
   7)testDB 데이터베이스를 삭제해라

 접속한 DATABASE확인. DATABASE()를 활용. (mysql/mariadb)
  => select database();

===================
**MySQL Data Types

 *문자 데이터 타입들:
	CHAR(size)	: 고정 길이 데이터 타입(최대 255byte)-지정된 길이보다 짧은 데이터 입력될 시 나머지 공간은 공백으로 채워진다. 
	VARCHAR(size)	: 가변 길이 데이터 타입(최대 255byte)-지정된 길이보다 짧은 데이터 입력될 시 너머지 공간은 채우지 않는다.
	TINYTEXT	: 문자열 데이터 타입(최대 255byte)
	TEXT		: 문자열 데이터 타입(최대 65535byte)
	MEDIUMTEXT	: 문자열 데이터 타입(최대 16777215byte):
	LONGTEXT	: 문자열 데이터 타입(최대 4294967295byte)
	ENUM(x,y,z,etc)	: 입력가능한 데이터 리스트를 정하고 입력받음. 

 *숫자형 데이터 타입들:
	TINYINT		: 정수형 데이터타입(1byte) -128 ~ +127 또는 0 ~ 255
	SMALLINT	: 정수형 데이터타입(2byte) -32768 ~ +32767 또는 0~65536
	MEDIUMINT	: 정수형 데이터타입(3byte) -8388608 ~ +8388607 또는 0 ~ 16777215
	INT		: 정수형 데이터타입(4byte) -2147483648 ~ +21417483647 또는 0 ~ 4294967295
	BIGINT		: 정수형 데이터타입(8byte) -무제한 수 표현 가능
	FLOAT(길이,소수)	: 부동 소수형 데이터타입(4byte) -고정 소수점을 사용
	DECIMAL(길이,소수): 고정 소수형 데이터타입(길이+1byte) -소수점을 사용
	DOUBLE(길이,소수): 부동 소수형 데이터타입(8byte) -DOUBLE을 문자열로 저장

 *날짜형 데이터 타입들:
	DATE		: 날짜(년도,월,일)형태의 기간 표현 데이터타입(3byte)
	TIME		: 시간(시,분,초) 형태의 기간 표현 데이터타입(3byte)
	DATETIME	: 날짜와 시간 형태의 기간 표현 데이터타입(8byte)
	TIMESTAMP	: 날짜와 시간 형태의 기간 표현 데이터타입(4byte) 
                         -시스템 변경시 자동으로 그 날짜와 시간이 저장
	YEAR		: 년도 표현 데이터 타입(1byte)


 *이진 데이터 타입들 : 
	BINARY(size) & BYTE(size) : CHAR의 형태의 이진데이터 타입(최대 255byte)
	VARBINARY(size)	: VARCHAR의 형태의 이진 데이터 타입(최대 65535byte)
	TINYBLOB(size)	: 이진 데이터 타입(최대 255byte)
	BLOB(size)	: 이진 데이터 타입(최대 65535byte)
	MEDIUMBLOB(size): 이진 데이터 타입(최대 16777215byte)
	LONGBLOB(size)	: 이진 데이터 타입(최대 4294967295byte)

참조 : https://www.w3schools.com/sql/sql_datatypes.asp



 *** Constraints(제약조건)
  : 테이블을 생성할 때에 테이블의 컬럼에 제약 조건을 설정할 수 있음.

	CREATE TABLE table_name (
	    column1 datatype constraint,
	    column2 datatype constraint,
	    column3 datatype constraint,
	    ....
	);  

   제약조건은 테이블 내에 데이터(레코드)를 위한 특별한 규칙을 정하는 것을 의미함.
  즉, 테이블 안에 데이터를 저장할 때에 제한을 걸어 규정된 내용 이외의 값이나 동작을 막는 역할을 함.
   제약조건은 테이블에 있는 Column들 혹은 Table에 지정할 수 있고, Table에 지정한 경우에는 
  Table전체에 영향을 주게 된다. 

   일반적으로 사용하는 제약 조건들... 
   -NOT NULL : column 값에 NULL을 가질 수 없다.
   -UNIQUE : column내에 모든 값들 중에 유일해야 한다.
             (전체가 달라야 함... 중복X) 
   -PRIMARY KEY : NOT NULL과 UNIQUE을 합한 형태로 테이블 내에 각 레코들 구분하는 값. 
   -FOREIGN KEY : 다른 테이블에서 레코드를 구분할 수 있는 값
   -CHECK : 컬럼의 모든 값이 특정 조건을 충촉하는지 확인
   -DEFAULT : 값이 지정되지 않은 경우 column의 기본값을 설정
   -INDEX : DBMS에서 데이터를 매우 신속하게 생성 및 검색하는 데 사용

 *NOT NULL 연습
MariaDB [testDB]> create table Persons(
    -> ID int NOT NULL,
    -> LastName varchar(255) NOT NULL,
    -> FirstName varchar(255) NOT NULL,
    -> Age int
    -> );

MariaDB [testdb]> desc persons;
+-----------+--------------+------+-----+---------+-------+
| Field     | Type         | Null | Key | Default | Extra |
+-----------+--------------+------+-----+---------+-------+
| ID        | int(11)      | NO   |     | NULL    |       |
| LastName  | varchar(255) | NO   |     | NULL    |       |
| FirstName | varchar(255) | NO   |     | NULL    |       |
| Age       | int(11)      | YES  |     | NULL    |       |
+-----------+--------------+------+-----+---------+-------+
4 rows in set (0.012 sec)


 *UNIQUE 설정
MariaDB [testDB]> create table Persons(
    -> ID int NOT NULL,
    -> LastName varchar(255) NOT NULL,
    -> FirstName varchar(255),
    -> Age int,
    -> UNIQUE (ID)
    -> );

MariaDB [testdb]> desc persons;
+-----------+--------------+------+-----+---------+-------+
| Field     | Type         | Null | Key | Default | Extra |
+-----------+--------------+------+-----+---------+-------+
| ID        | int(11)      | NO   | PRI | NULL    |       |
| LastName  | varchar(255) | NO   |     | NULL    |       |
| FirstName | varchar(255) | YES  |     | NULL    |       |
| Age       | int(11)      | YES  |     | NULL    |       |
+-----------+--------------+------+-----+---------+-------+
4 rows in set (0.013 sec)


 *Primary key 설정
MariaDB [testDB]> create table Persons (
    -> ID int,
    -> LastName varchar(255) NOT NULL,
    -> FirstName varchar(255),
    -> Age int,
    -> PRIMARY KEY (ID)
    -> );

MariaDB [testdb]> desc persons;
+-----------+--------------+------+-----+---------+-------+
| Field     | Type         | Null | Key | Default | Extra |
+-----------+--------------+------+-----+---------+-------+
| ID        | int(11)      | NO   | PRI | NULL    |       |
| LastName  | varchar(255) | NO   |     | NULL    |       |
| FirstName | varchar(255) | YES  |     | NULL    |       |
| Age       | int(11)      | YES  |     | NULL    |       |
+-----------+--------------+------+-----+---------+-------+
4 rows in set (0.013 sec)

 *CHECK 설정 (나이가 18살 이상인인지 확인)
MariaDB [testDB]> create table Persons (
    -> ID int NOT NULL,
    -> LastName varchar(255) NOT NULL,
    -> FirstName varchar(255),
    -> Age int,
    -> CHECK (Age>=18)
    -> );

 **DEFAULT 제약은 또한 함수 등을 사용하여 시스템값을 입력할 때도 사용함. 
  CURDATE() => 현재 날짜를 얻어오는 함수

MariaDB [testDB]> create table Orders (
    -> ID int NOT NULL,
    -> OrderNumber int NOT NULL,
    -> OrderDate TIMESTAMP DEFAULT NOW()
    -> );

MariaDB [testdb]> desc orders;
+-------------+-----------+------+-----+---------------------+-------+
| Field       | Type      | Null | Key | Default             | Extra |
+-------------+-----------+------+-----+---------------------+-------+
| ID          | int(11)   | NO   |     | NULL                |       |
| OrderNumber | int(11)   | NO   |     | NULL                |       |
| OrderDate   | timestamp | NO   |     | current_timestamp() |       |
+-------------+-----------+------+-----+---------------------+-------+
3 rows in set (0.008 sec)



 *AUTO_INCREMENT (자동 증가값)
 : 레코드를 추가할 때마다 자동으로 값이 증가하는 값

MariaDB [testDB]> create table Persons (
    -> ID int NOT NULL AUTO_INCREMENT,
    -> LastName varchar(255) NOT NULL,
    -> FirstName varchar(255),
    -> Age int,
    -> PRIMARY KEY (ID)
    -> );

MariaDB [testdb]> desc persons;
+-----------+--------------+------+-----+---------+----------------+
| Field     | Type         | Null | Key | Default | Extra          |
+-----------+--------------+------+-----+---------+----------------+
| ID        | int(11)      | NO   | PRI | NULL    | auto_increment |
| LastName  | varchar(255) | NO   |     | NULL    |                |
| FirstName | varchar(255) | YES  |     | NULL    |                |
| Age       | int(11)      | YES  |     | NULL    |                |
+-----------+--------------+------+-----+---------+----------------+
4 rows in set (0.011 sec)

  *Persons 테이블에 ID값 자동 증가값을 지정하여 사용할 경우, 기본 값 1에서 1씩 증가함.

  **시작값을 특정값으로 지정하여 사용하는 경우
MariaDB [testDB]> alter table Persons AUTO_INCREMENT=100;  
                => AUTO_INCREMENT값을 100으로 기본값 설정

MariaDB [testdb]> select * from persons where id=100;
+-----+----------+-----------+------+
| ID  | LastName | FirstName | Age  |
+-----+----------+-----------+------+
| 100 | t1       | tester1   |   26 |
+-----+----------+-----------+------+
1 row in set (0.000 sec)

